service: aws-serverless-web-app-api

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  stackname: aws-serverless-web-app-api-${sls:stage}
  runtime: ${file(./config/${self:provider.stage}.yml):api.lambda.runtime}
  memorySize: ${file(./config/${self:provider.stage}.yml):api.lambda.memory}
  timeout: ${file(./config/${self:provider.stage}.yml):api.lambda.timeout}
  environment:
    ENV: ${self:provider.stage}

custom:
  authorsTableName: authors
  coursesTableName: courses
  dynamodb:
    stages:
      - local
    start:
      migrate: true
  serverless-offline:
    resourceRoutes: true # HTTP proxy

functions:
  GetCourse:
    handler: ./src/get-course.handler
    name: get-course-${self:provider.stage}
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.coursesTableName}
    events:
      - http:
          path: courses/{id}
          method: GET
          cors: true
    iamRoleStatementsName: get-course-${self:provider.stage}-role # prevent auto generated role name for function: ${functionName} is too long (over 64 chars).
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:GetItem'
        Resource: !GetAtt CoursesDynamoDbTable.Arn
  CreateCourse:
    handler: ./src/create-course.handler
    name: create-course-${self:provider.stage}
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.coursesTableName}
    events:
      - http:
          path: courses
          method: POST
          cors: true
    iamRoleStatementsName: create-course-${self:provider.stage}-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:PutItem'
        Resource: !GetAtt CoursesDynamoDbTable.Arn
  UpdateCourse:
    handler: ./src/update-course.handler
    name: update-course-${self:provider.stage}
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.coursesTableName}
    events:
      - http:
          path: courses/{id}
          method: PUT
          cors: true
    iamRoleStatementsName: update-course-${self:provider.stage}-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:UpdateItem'
          - 'dynamodb:GetItem'
        Resource: !GetAtt CoursesDynamoDbTable.Arn
  DeleteCourse:
    handler: ./src/delete-course.handler
    name: delete-course-${self:provider.stage}
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.coursesTableName}
    events:
      - http:
          path: courses/{id}
          method: DELETE
          cors: true
    iamRoleStatementsName: delete-course-${self:provider.stage}-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:DeleteItem'
          - 'dynamodb:GetItem'
        Resource: !GetAtt CoursesDynamoDbTable.Arn
  GetAllCourse:
    handler: ./src/get-all-courses.handler
    name: get-all-courses-${self:provider.stage}
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.coursesTableName}
    events:
      - http:
          path: courses
          method: GET
          cors: true
    iamRoleStatementsName: get-all-course-${self:provider.stage}-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:Scan'
        Resource: !GetAtt CoursesDynamoDbTable.Arn
  CreateAuthor:
    handler: ./src/create-author.handler
    name: create-author-${self:provider.stage}
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.authorsTableName}
    events:
      - http:
          path: authors
          method: POST
          cors: true
    iamRoleStatementsName: create-author-${self:provider.stage}-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:PutItem'
        Resource: !GetAtt AuthorsDynamoDbTable.Arn
  GetAllAuthors:
    handler: ./src/get-all-authors.handler
    name: get-all-authors-${self:provider.stage}
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.authorsTableName}
    events:
      - http:
          path: authors
          method: GET
          cors: true
    iamRoleStatementsName: get-all-authors-${self:provider.stage}-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:Scan'
        Resource: !GetAtt AuthorsDynamoDbTable.Arn

resources: # CloudFormation template syntax
  Resources:
    CoursesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.coursesTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AuthorsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.authorsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
